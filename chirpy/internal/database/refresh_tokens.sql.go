// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token, expires_at, revoked_at, created_at, updated_at)
VALUES (
    $1,
    $2,
    TIMESTAMP 'now' + INTERVAL '60 days',
    NULL,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
)
`

type CreateRefreshTokenParams struct {
	UserID uuid.UUID
	Token  string
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.UserID, arg.Token)
	return err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT user_id FROM refresh_tokens
WHERE token = $1
AND revoked_at IS NULL
AND expires_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :one
UPDATE refresh_tokens
SET revoked_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE token = $1
RETURNING user_id
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
